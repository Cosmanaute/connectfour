use std::io::{self, Write};

struct Board {
    grid: [[char; 7]; 6 ],
}

impl Board {
    fn new() -> Board {
        Board {
            grid: [['#'; 7]; 6],
        }
    }

    fn display(&self) {
        for (i, row) in self.grid.iter().enumerate() {
            for col in row.iter() {
                print!("{}", col);
            }
            println!("");
        }
    }
    
    fn place_mark(&mut self, col: usize, mark: char) {
        for (i, row) in self.grid.iter().rev() {
            if self.grid.is_empty() {
               self.grid[i][col] = mark;
            }
            else {
                continue;
            }
        } 
    } 

    fn is_empty(&self, row: usize, col: usize) -> bool {
        self.grid[row][col] == '#'
    }


}

fn main() {
    
    let mut board = Board::new();
    let mut current_player = 'O';

    loop {
        board.display();
        
        //get input
        print!("Player {}, enter your move: ", current_player);
        io::stdout().flush().unwrap();
        let mut input = String::new();
        io::stdin().read_line(&mut input).expect("Could not read line");
        let col: usize = input.trim().parse().unwrap();
        board.place_mark(col - 1, current_player);

    }
}

